1、类中没有方法体，没有花括号，直接分号结束。叫抽象方法，使用关键字abstract

public abstract function fun();

2、接口
指定了一个实现了该接口的类必须实现的一系列函数

接口是对动作的抽象，表示这个对象能做什么，对类的拒捕行为进行抽象。
抽象类是对根源的抽象，表示这个类是什么，对类的整体进行抽象，对一类事物的抽象描述。


<?php

/**
* 含有抽象方法的类必须是抽象类
* 抽象类不一定非得含有抽象方法
* 抽象类可以存在普通方法
* 抽象类不能被实例化 必须由一个字累去继承，并且把抽象类的抽象方法都实现了
*/
abstract class Person{
  public abstract function eat(){
    echo "eat";
  }
  // 抽象方法 没有方法体
  public abstract function eat1();
}

class Man extends Person{
  public function eat1(){
    echo "eat";
  }
}
$man = new Man();
$man->eat1();

?>



<?php
/**
* 接口声明关键字 interface
* 接口可以声明 常量，也可以是抽象方法
* 接口中的方法都是 抽象方法，不用abstract去人肉定义
* 接口不能被实例化 需要一个类去实现
* 一个类不能继承多个类，可以实现多个接口
*/
interface Person{
  const NAME = "ren";
  public function run();
  public function eat();
}
interface Study{
  public function study();
}

class Student implements Person, Study{
  const data = 3.14;
  public function run(){
    echo "run";
  }
  public function eat(){
    echo "eat";
  }
  public function study(){
    echo "study";
  }
  public function test(){
    echo self::data;
  }
  public static function test1(){
    echo self::data;
  }
}

$xw = new Study; // 不能实例化
$xw = new Student;
$xw->eat(); // 输出eat

echo $xw::NAME; // 输出ren

echo $xw->test(); // 3.14
echo Student::data;  // 3.14

// 静态的可以直接输出
echo Student::test1(); // 3.14
?>


